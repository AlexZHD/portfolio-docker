https://www.django-rest-framework.org

#pep8
#install
    python3 -m pip install autopep8
    autopep8 --in-place name.py
    or
        #with double agretion
        autopep8 --in-place -a -a name.py

docker build .
docker-compose build
#create django project
    docker-compose run app sh -c "django-admin.py startproject app ."

#Flake8 is a Python library that wraps PyFlakes, pycodestyle and Ned Batchelder’s McCabe script. 
#It is a great toolkit for checking your code base against coding style (PEP8), 
#programming errors (like “library imported but unused” and “Undefined name”) and to check cyclomatic complexity.
    python manage.py test && flake8
        or 
    docker-compose run app sh -c "python manage.py test && flake8"
    #unit django testing
        docker-compose run app sh -c "python manage.py test"

#create core app
    docker-compose run app sh -c "python manage.py startapp core"

#because we changed default user django model for user registration we need to run migrations as instruction to 
#create databese later
    docker-compose run app sh -c "python manage.py makemigrations core"

# create superuser 
  docker-compose run app sh -c "python manage.py createsuperuser"

#create user app
    docker-compose run --rm app sh -c "python manage.py startapp user"  


#add rest framework, add user api
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
        'rest_framework',
        'rest_framework.authtoken',
    'core',
    'users',
]

docker-compose run --rm app sh -c "python manage.py test && flake8"

#create user api
    #create serialiser for our user requests
    #create view to handle requests
    #wire these to url

#token auth
    #create token endpoint, open api to requests token
    test@hotmail.com
        HTTP 200 OK
        Allow: POST, OPTIONS
        Content-Type: application/json
        Vary: Accept

        {
            "token": "13d763bc88a7091aa73c861553d7a6159a09445a"
        }

#use chrome ext. modheader
    #to modify post header

#creating tag api to sort and filtering recepies
    docker-compose run --rm app sh -c "python manage.py startapp recipe"
    #add tag databese model to handle tag objects
        name of tag and user who ownes tag
        docker-compose run app sh -c "python manage.py makemigrations"
    #list tags api

#re-factor tag and ingredients api
    git commit -am "refactored tags and ingredients"

#add recipe model
    docker-compose run app sh -c "python manage.py makemigrations"

# add python image manipulation package to project

# add filtering
    127.0.0.1:8000/api/recipe/recipes/?tag=2&ingredients=1

# remov dir from git    
    git rm -r ./app/vol

# deployment
    https://www.youtube.com/watch?v=3cRT1RmCyKg
        The Gunicorn "Green Unicorn" is a Python Web Server Gateway Interface HTTP server
        Nginx is a web server and reverse-proxy responsible for serving static content, gzip compression, 
        ssl, proxy_buffers and other HTTP stuff while gunicorn is a Python HTTP server that interfaces with 
        both nginx and your actual python web-app code to serve dynamic content.
            Gunicorn
                $ pip install gunicorn
                $ cat myapp.py
                    def app(environ, start_response):
                        data = b"Hello, World!\n"
                        start_response("200 OK", [
                            ("Content-Type", "text/plain"),
                            ("Content-Length", str(len(data)))
                        ])
                        return iter([data])
                #to strat 4 nodes Python WSGI HTTP Server for UNIX
                $ gunicorn -w 4 myapp:app
                [2014-09-10 10:22:28 +0000] [30869] [INFO] Listening at: http://127.0.0.1:8000 (30869)
                #Latest version: 19.9.0

            wget https://wordpress.org/latest.zip

            docker build .
            docker-compose build

            docker-compose run app sh -c "python manage.py createsuperuser"

            #test
            docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d

            #prod
            docker-compose -f docker-compose.yml -f docker-compose.test.yml config > prod.yml

    https://blog.devartis.com/django-development-with-docker-a-completed-development-cycle-7322ad8ba508
    https://testdriven.io/blog/dockerizing-django-with-postgres-gunicorn-and-nginx/
    #UT with Selenium
        https://medium.com/zeitcode/a-simple-recipe-for-django-development-in-docker-bonus-testing-with-selenium-6a038ec19ba5